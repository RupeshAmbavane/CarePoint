generator client {
  provider      = "prisma-client-js"
  binaryTargets = ["native", "debian-openssl-1.1.x"]
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model Auth {
  id       String   @id @default(uuid())
  email    String   @unique
  password String
  userId   String?
  role     UserRole

  @@map("Auth")
}

model UserVerfication {
  id           String    @id @default(uuid())
  userId       String
  uniqueString String?
  expiresAt    DateTime?
  createdAt    DateTime  @default(now())
  updatedAt    DateTime  @updatedAt
}

model ForgotPassword {
  id           String    @id @default(uuid())
  userId       String
  uniqueString String?
  expiresAt    DateTime?
  createdAt    DateTime  @default(now())
  updatedAt    DateTime  @updatedAt

  @@map("forgot-password")
}

model Patient {
  id           String         @id @default(uuid())
  firstName    String
  lastName     String
  dateOfBirth  DateTime?
  bloodGroup   String?
  mobile       String?
  city         String?
  state        String?
  zipCode      String?
  gender       String?
  country      String?
  email        String         @unique
  address      String?
  img          String?
  createdAt    DateTime       @default(now())
  updatedAt    DateTime       @updatedAt
  appointments Appointments[]
  favourites   Favourites[]
  Prescription Prescription[]
  Reviews      Reviews[]

  @@map("Patient")
}

model Doctor {
  id                     String           @id @default(uuid())
  firstName              String
  lastName               String
  email                  String           @unique
  address                String?
  img                    String?
  phone                  String?
  gender                 Gender?
  dob                    String?
  biography              String?
  clinicName             String?
  clinicAddress          String?
  clinicImages           String?
  city                   String?
  state                  String?
  country                String?
  postalCode             String?
  price                  String?
  services               String?
  specialization         String?
  degree                 String?
  college                String?
  completionYear         String?
  experience             String?
  designation            String?
  award                  String?
  awardYear              String?
  registration           String?
  year                   String?
  experienceHospitalName String?
  expericenceStart       String?
  expericenceEnd         String?
  verified               Boolean?         @default(false)
  createdAt              DateTime         @default(now())
  updatedAt              DateTime         @updatedAt
  appointments           Appointments[]
  blogs                  Blogs[]
  DoctorTimeSlot         DoctorTimeSlot[]
  favourites             Favourites?
  prescription           Prescription[]
  reviews                Reviews[]

  @@map("Doctor")
}

model Appointments {
  id                 String              @id @default(uuid())
  patientId          String?
  doctorId           String?
  trackingId         String?             @unique
  firstName          String?
  lastName           String?
  email              String?
  phone              String?
  address            String?
  description        String?
  scheduleDate       String?
  scheduleTime       String?
  reasonForVisit     String?
  status             String?             @default("pending")
  paymentStatus      paymentStatus?      @default(unpaid)
  prescriptionStatus prescriptionStatus? @default(notIssued)
  isFollowUp         Boolean?            @default(false)
  patientType        String?
  createdAt          DateTime            @default(now())
  updatedAt          DateTime            @updatedAt
  doctor             Doctor?             @relation(fields: [doctorId], references: [id])
  patient            Patient?            @relation(fields: [patientId], references: [id])
  payment            Payment[]
  prescription       Prescription[]

  @@map("Appointments")
}

model Payment {
  id            String       @id @default(uuid())
  appointmentId String
  paymentMethod String
  paymentType   String
  DoctorFee     Int
  bookingFee    Int
  vat           Int?
  totalAmount   Int
  appointment   Appointments @relation(fields: [appointmentId], references: [id])

  @@map("Payment")
}

model Reviews {
  id            String   @id @default(uuid())
  doctorId      String
  patientId     String
  description   String?
  star          String?
  isRecommended Boolean?
  response      String?
  createdAt     DateTime @default(now())
  updatedAt     DateTime @updatedAt
  doctor        Doctor   @relation(fields: [doctorId], references: [id])
  patient       Patient  @relation(fields: [patientId], references: [id])

  @@map("Reviews")
}

model Prescription {
  id            String       @id @default(uuid())
  doctorId      String
  patientId     String
  appointmentId String
  followUpdate  String?
  instruction   String?
  isFullfilled  Boolean      @default(false)
  isArchived    Boolean      @default(false)
  daignosis     String?
  disease       String
  test          String?
  createdAt     DateTime     @default(now())
  updatedAt     DateTime     @updatedAt
  medicines     Medicine[]
  appointment   Appointments @relation(fields: [appointmentId], references: [id])
  doctor        Doctor       @relation(fields: [doctorId], references: [id])
  patient       Patient      @relation(fields: [patientId], references: [id])

  @@map("Prescription")
}

model Medicine {
  id             String       @id @default(uuid())
  prescriptionId String
  medicine       String?
  dosage         String?
  frequency      String?
  duration       String?
  createdAt      DateTime     @default(now())
  updatedAt      DateTime     @updatedAt
  prescription   Prescription @relation(fields: [prescriptionId], references: [id])

  @@map("Medicine")
}

model Favourites {
  id        String   @id @default(uuid())
  doctorId  String   @unique
  patientId String?
  doctor    Doctor   @relation(fields: [doctorId], references: [id])
  patient   Patient? @relation(fields: [patientId], references: [id])

  @@map("Favourites")
}

model DoctorTimeSlot {
  id             String        @id @default(uuid())
  doctorId       String
  day            Day?
  weekDay        String?
  maximumPatient Int?
  createdAt      DateTime      @default(now())
  updatedAt      DateTime      @updatedAt
  doctor         Doctor        @relation(fields: [doctorId], references: [id])
  timeSlot       ScheduleDay[]

  @@map("DoctorTimeSlot")
}

model ScheduleDay {
  id               Int             @id @default(autoincrement())
  startTime        String
  endTime          String
  doctorTimeSlotId String?
  doctorTimeSlot   DoctorTimeSlot? @relation(fields: [doctorTimeSlotId], references: [id])
}

model Blogs {
  id          String   @id @default(uuid())
  title       String
  description String
  img         String?
  userId      String
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt
  user        Doctor   @relation(fields: [userId], references: [id])
}

enum UserRole {
  admin
  patient
  doctor
}

enum Day {
  saturday
  sunday
  monday
  tuesday
  wednesday
  thursday
  friday
}

enum Gender {
  male
  female
}

enum prescriptionStatus {
  issued
  notIssued
}

enum paymentStatus {
  paid
  unpaid
}
